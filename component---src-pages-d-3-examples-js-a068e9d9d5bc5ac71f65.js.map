{"version":3,"sources":["webpack:///./src/utils/d3-weatherApi.js","webpack:///./src/utils/d3-helpers.js","webpack:///./src/components/d3-examples/radio-buttons.js","webpack:///./src/pages/d3-examples.js","webpack:///./src/utils/d3-locations.js"],"names":["d3_weatherApi","asyncToGenerator_default","regenerator_default","a","mark","_callee3","dataArray","locationResults","wrap","_context3","prev","next","d3_locations","locations","map","_ref2","_callee","loc","response","data","_context","fetch","_id","key","sent","json","abrupt","stop","this","_x","apply","arguments","_ref3","_callee2","item","location","forecast","_context2","city","name","country","list","ts","dateTime","dt","temp","main","humidity","_x2","apiResults","results","canvas","dataset","node","x","y","margin","top","right","bottom","left","E","D","radio_buttons_D3CheckboxRadioGroup","state","render","_ref","_temp","props","handleChange","parentState","react_default","createElement","Form","Field","Checkbox","radio","label","value","checked","onChange","react","Component","graphDiv","d3_examples_App","weatherData","select","d3populated","t","handleSelectChange","e","_this","setState","clearGraph","d3","selectAll","remove","populateWeather","w","getWeatherData","length","t0","t1","t2","call","scaffoldCanvas","populateGraph","componentDidUpdate","src","weatherResults","_extends","Promise","all","Object","assign","target","i","source","prototype","hasOwnProperty","containerDiv","document","getElementById","svg","append","attr","clientHeight","clientWidth","d3_collection_src","b","d","rollup","entries","d3_time_format_src","range","d3_array_src","Date","d3_scale_src","c","domain","tempVariance","keys","highestTemp","lowestTemp","f","z","d3_scale_chromatic_src","line","d3_shape_src","curve","y0","y1","enter","style","d3_axis_src","tickFormat","date","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","d3_time_src","g","j","k","ticks","Math","min","round","floor","text","o","Container","className","textAlign","borderBottom","padding","minHeight","id","__webpack_exports__","default","G","598","module","exports","coord","lon","lat"],"mappings":"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","file":"component---src-pages-d-3-examples-js-a068e9d9d5bc5ac71f65.js","sourcesContent":["import { locations, key } from './d3-locations';\n\nexport default async () => {\n  const dataArray = locations.map(async (loc) => {\n    const response = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?id=${\n        loc._id\n      }&units=metric&APPID=${key}`,\n    );\n    const data = await response.json();\n    return data;\n  });\n  const locationResults = dataArray.map(async (data) => {\n    const item = await data;\n    const location = item.city.name + ', ' + item.city.country;\n    const forecast = item.list.map((ts) => {\n      return {\n        dateTime: ts.dt,\n        temp: ts.main.temp,\n        humidity: ts.main.humidity,\n      };\n    });\n    return {\n      name: location,\n      forecast,\n    };\n  });\n  return {\n    apiResults: {\n      response: 'success',\n      results: locationResults,\n    },\n  };\n};\n","export var canvas = {\n  dataset: [\n    5,\n    10,\n    13,\n    19,\n    21,\n    25,\n    22,\n    18,\n    15,\n    13,\n    11,\n    12,\n    15,\n    20,\n    18,\n    17,\n    16,\n    18,\n    23,\n    25,\n  ],\n  node: null,\n  x: null,\n  y: null,\n  margin: {\n    top: 25,\n    right: 10,\n    bottom: 25,\n    left: 50,\n  },\n};\n","import React, { Component } from 'react'\nimport { Form, Checkbox } from 'semantic-ui-react'\n\nexport default class D3CheckboxRadioGroup extends Component {\n  state = {}\n\n  render({handleChange, parentState} = this.props) {\n    return (\n      <Form>\n        <Form.Field>\n          Selected value: <b>{parentState}</b>\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            radio\n            label='Clear'\n            name='checkboxRadioGroup'\n            value='clear'\n            checked={parentState === 'clear'}\n            onChange={handleChange} />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox\n            radio\n            label='Weather Data'\n            name='checkboxRadioGroup'\n            value='weather'\n            checked={parentState === 'weather'}\n            onChange={handleChange}\n          />\n        </Form.Field>\n      </Form>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { Container, Form, Checkbox } from 'semantic-ui-react';\nimport * as d3Selection from 'd3-selection';\nimport * as d3Collection from 'd3-collection';\nimport * as d3TimeFormat from 'd3-time-format';\nimport * as d3Time from 'd3-time';\nimport * as d3Array from 'd3-array';\nimport * as d3Scale from 'd3-scale';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport * as d3Shape from 'd3-shape';\nimport * as d3Axis from 'd3-axis';\nimport weatherFetch from '../utils/d3-weatherApi';\nimport testData from '../utils/d3-testData';\nimport { canvas } from '../utils/d3-helpers';\nimport RadioButtons from '../components/d3-examples/radio-buttons'\n\nconst graphDiv = '.graph-canvas';\n\nclass App extends Component {\n  state = {\n    weatherData: null,\n    canvas: null,\n    select: 'clear',\n    d3populated: false\n  };\n  \n  handleSelectChange = (e, { value }) => {\n    this.setState({\n        select: value\n    })\n  }\n\n  clearGraph = () => {\n    d3.select(graphDiv).selectAll(\"*\").remove();\n  }\n\n  populateWeather = async () => {\n    const w = await this.getWeatherData();\n    if (w && w.apiResults.results.length > 0) {\n      this.setState({\n        weatherData: await this.getWeatherData(),\n      });\n      this.setState({\n        canvas: this.scaffoldCanvas(),\n      });\n      this.populateGraph();\n    }\n  };\n\n    componentDidUpdate = () => {\n      if (this.state.select === 'weather' && !this.state.d3populated) {\n        this.setState({\n            d3populated: true,\n          });\n        this.populateWeather();\n    }\n    if (this.state.select === 'clear' && this.state.d3populated) {\n        debugger;\n        this.setState({\n            d3populated: false,\n          });\n          d3Selection.select(graphDiv).selectAll(\"svg\").remove();\n    } \n  }\n\n  getWeatherData = async () => {\n    if (process.env.NODE_ENV === 'development') {\n      return testData;\n    }\n    const weatherData = await weatherFetch();\n    const weatherResults = await Promise.all(weatherData.apiResults.results);\n    var _extends =\n      Object.assign ||\n      function(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n        return target;\n      };\n\n    return _extends({}, weatherData, {\n      apiResults: _extends({}, weatherData.apiResults, {\n        results: weatherResults,\n      }),\n    });\n\n    // const result = {\n    //   ...weatherData,\n    //   apiResults: {\n    //     ...weatherData.apiResults,\n    //     results: weatherResults,\n    //   },\n    // };\n  };\n\n  \n\n  scaffoldCanvas = () => {\n    var containerDiv = document.getElementById('graph-canvas-weather');\n    var svg = d3Selection\n      .select(graphDiv)\n      .append('svg')\n      .attr('height', containerDiv.clientHeight)\n      .attr('width', containerDiv.clientWidth);\n    const x =\n      containerDiv.clientWidth - (canvas.margin.left + canvas.margin.right);\n    const y =\n      containerDiv.clientHeight - (canvas.margin.top + canvas.margin.bottom);\n    const node = svg\n      .append('g')\n      .attr(\n        'transform',\n        'translate(' + canvas.margin.left + ',' + canvas.margin.top + ')',\n      );\n    const dataset = d3Collection\n      .nest()\n      .key(function(d) {\n        return d.name;\n      })\n      .rollup(function(d) {\n        return d[0];\n      })\n      .entries(this.state.weatherData.apiResults.results);\n    return {\n      ...canvas,\n      ...{\n        x,\n        y,\n        node,\n        dataset,\n      },\n    };\n  };\n\n  populateGraph = () => {\n    var timeParse = d3TimeFormat.timeParse('%Y-%m-%dT%H:%M');\n    var formatTime = d3TimeFormat.timeFormat('%Y-%m-%dT%H:%M');\n    var arr = this.state.canvas.dataset[0].value.forecast;\n    var range = [\n      d3Array.extent(this.state.canvas.dataset[0].value.forecast, function(d) {\n        return new Date(d.dateTime * 1000);\n      }),\n    ];\n\n    var x = d3Scale\n      .scaleTime()\n      .range([0, this.state.canvas.x])\n      .domain(range[0]);\n\n    var tempVariance = d3Collection\n      .nest()\n      .key(function(d) {\n        return d3Array.max(d.value.forecast, function(d) {\n          return d.temp;\n        });\n      })\n      .map(this.state.canvas.dataset)\n      .keys();\n\n    var highestTemp = d3Array.max(tempVariance);\n    var lowestTemp = d3Array.min(tempVariance);\n\n    var y = d3Scale\n      .scaleLinear()\n      .range([this.state.canvas.y, 0])\n      .domain([lowestTemp - 50, highestTemp]);\n\n    var z = d3Scale.scaleOrdinal(d3ScaleChromatic.schemeCategory10).domain(\n      this.state.weatherData.apiResults.results.map(function(d) {\n        return d.name;\n      }),\n    );\n\n    var line = d3Shape\n      .line()\n      // .interpolate('basis')\n      .curve(d3Shape.curveNatural)\n      //   .curve(d3.curveStepAfter)\n      .x(function(d) {\n        return x(new Date(d.dateTime * 1000));\n      })\n      .y(function(d) {\n        return y(d.temp);\n      });\n\n    var area = d3Shape\n      .area()\n      .curve(d3Shape.curveStepAfter)\n      .x(function(d) {\n        return x(new Date(d.dateTime * 1000));\n      })\n      .y0(this.state.canvas.x)\n      .y1(function(d) {\n        return y(d.temp);\n      });\n\n    var lineGraph = this.state.canvas.node.append('g');\n\n    var location = this.state.canvas.node\n      .append('g')\n      .selectAll('.location')\n      .data(this.state.weatherData.apiResults.results)\n      .enter()\n      .append('g')\n      .attr('class', 'location');\n\n    location\n      .append('path')\n      .attr('class', 'line')\n      .attr('d', function(d) {\n        return line(d.forecast);\n      })\n      .style('stroke', function(d) {\n        return z(d.name);\n      })\n      .attr('fill', 'none');\n    this.state.canvas.node\n      .append('g')\n      .attr('class', 'axis axis--x')\n      .attr('transform', 'translate(0,' + this.state.canvas.y + ')')\n      .call(\n        d3Axis.axisBottom(x).tickFormat(function(d) {\n          var formatMillisecond = d3TimeFormat.timeFormat('.%L'),\n            formatSecond = d3TimeFormat.timeFormat(':%S'),\n            formatMinute = d3TimeFormat.timeFormat('%H:%M'),\n            formatHour = d3TimeFormat.timeFormat('%H:00'),\n            formatDay = d3TimeFormat.timeFormat('%a %d'),\n            formatWeek = d3TimeFormat.timeFormat('%b %d'),\n            formatMonth = d3TimeFormat.timeFormat('%B'),\n            formatYear = d3TimeFormat.timeFormat('%Y'),\n            multiFormat = function(date) {\n              return (d3Time.timeSecond(date) < date\n                ? formatMillisecond\n                : d3Time.timeMinute(date) < date\n                  ? formatSecond\n                  : d3Time.timeHour(date) < date\n                    ? formatMinute\n                    : d3Time.timeDay(date) < date\n                      ? formatHour\n                      : d3Time.timeMonth(date) < date\n                        ? d3Time.timeWeek(date) < date\n                          ? formatDay\n                          : formatWeek\n                        : d3Time.timeYear(date) < date\n                          ? formatMonth\n                          : formatYear)(date);\n            };\n          return multiFormat(d);\n        }),\n      );\n\n    this.state.canvas.node\n      .append('g')\n      .attr('class', 'axis y-axis')\n      .call(\n        d3Axis\n          .axisLeft(y)\n          .ticks(\n            Math.min(\n              Math.round(Math.floor(this.state.canvas.y / 35) + 1),\n              highestTemp,\n            ),\n            '.0f',\n          ),\n      )\n      .append('text')\n      .attr(\n        'transform',\n        'rotate(-90) translate(' +\n          -(this.state.canvas.y / 2) +\n          ', ' +\n          -this.state.canvas.margin.left * 0.8 +\n          ')',\n      )\n      .attr('class', 'label')\n      .attr('text-anchor', 'middle')\n      .style('font-weight', 'normal')\n      .style('font-size', '12px')\n      .attr('y', 6)\n      .attr('dy', '.35em')\n      .attr('fill', '#666')\n      .text('Temp °C');\n    this.state.canvas.node.selectAll('.y-axis g text').attr('fill', '#666');\n    this.state.canvas.node.selectAll('.y-axis g line').attr('stroke', '#666');\n  };\n\n  render() {\n    return (\n    <Container>\n    <div className=\"App\">\n    <RadioButtons handleChange={this.handleSelectChange} parentState={this.state.select}/>\n    <div className=\"header\">\n    <h3 className=\"text-muted\">D3 Implementations</h3>\n    </div>\n    <div\n    style={{\n        textAlign: 'center',\n        borderBottom: '1px solid #e5e5e5',\n        padding: '0',\n        minHeight: '300px',\n        }}\n          className=\"jumbotron graph-canvas\"\n          id=\"graph-canvas-weather\"\n        />\n        <div className=\"bs-callout bs-callout-danger\">\n          <h4>Line Graph of Temperature Forecasts</h4>\n          <p>To add labeling, area fill and hover</p>\n        </div>\n      </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","module.exports = {\n    key : '56c35a841492f8856e471e53ebe6511b',\n    locations : [{\n        '_id': 2643123,\n        'name': 'Manchester',\n        'country': 'GB',\n        'coord': {\n          'lon': -2.23743,\n          'lat': 53.480949\n        }\n      },\n      {\n        '_id': 6612108,\n        'name': 'Nelson',\n        'country': 'NZ',\n        'coord': {\n          'lon': 173.284012,\n          'lat': -41.270889\n        }\n      },\n      {\n        '_id': 2191562,\n        'name': 'Dunedin',\n        'country': 'NZ',\n        'coord': {\n          'lon': 170.503616,\n          'lat': -45.874161\n        }\n      },\n      {\n        '_id': 5914132,\n        'name': 'Campbell River',\n        'country': 'CA',\n        'coord': {\n          'lon': -125.244591,\n          'lat': 50.016338\n        }\n      },\n      {\n        '_id': 2077963,\n        'name': 'Albany',\n        'country': 'AU',\n        'coord': {\n          'lon': 117.89167,\n          'lat': -35.016941\n        }\n      },\n      {\n        '_id': 6173331,\n        'name': 'Vancouver',\n        'country': 'CA',\n        'coord': {\n          'lon': -123.119339,\n          'lat': 49.24966\n        }\n      },\n      {\n        '_id': 3333204,\n        'name': 'City of Stoke-on-Trent',\n        'country': 'GB',\n        'coord': {\n          'lon': -2.16667,\n          'lat': 53\n        }\n      },\n      {\n        '_id': 2648773,\n        'name': 'Gateshead',\n        'country': 'GB',\n        'coord': {\n          'lon': -1.60168,\n          'lat': 54.96209\n        }\n      },\n      {\n        '_id': 5978765,\n        'name': 'Huntsville',\n        'country': 'CA',\n        'coord': {\n          'lon': -79.216316,\n          'lat': 45.333408\n        }\n      },\n      {\n        '_id': 7535661,\n        'name': 'London Borough of Harrow',\n        'country': 'GB',\n        'coord': {\n          'lon': -0.33333,\n          'lat': 51.566669\n        }\n      }\n    ]\n  }; "],"sourceRoot":""}